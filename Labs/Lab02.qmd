---
title: Understanding Types of Data
subtitle: Lab 2
author: Michael Pascale
date: 2025-09-05
code-annotations: select
---

This lab will translate what we've learned about kinds of data into how _real_ data of these types are processed for visualization and later statistical analysis.

## Self-Study

This lab corresponds roughly to the following chapters in **R for Data Science**, which are recommended for further self-study.

- [_Workflow: Basics_ 2.1-2.6](https://r4ds.hadley.nz/workflow-basics.html)
- [_Factor Basics_ 16.2](https://r4ds.hadley.nz/factors.html#factor-basics)
- [_Dataframe_ 1.2.1](https://r4ds.hadley.nz/data-visualize.html#the-penguins-data-frame)

## From Values to Vectors

Before we can begin, we need to develop a sense for how R handles **datasets**.

In our first lab, we demonstrated how to store single values in **variables**, effectively giving them a name we can reference later.

```{r}
n <- 42
lucky_number <- 7
IDriveA <- "honda civic"

# Find the radius of a circle.
x <- 3.14159
r <- 7
2*x*r
```
:::{.aside}
Here we assign values to a few variables with arbitrary names: `n`, `lucky_number`, `IDriveA`, `x`, `r`.
<br><br>
We can use variables in mathematical expressions as demonstrated here by calculating the circumference of a circle with radius 7cm.
:::

Of course, when we collect data it's actually _many values_ we need to work with. In R, we can create **vectors** to hold long columns of values, as we might obtain from real data.

```{r}
some_numbers <- c(3, 6, 8, 12)

some_numbers
```

:::{.aside}
The `c()` function <u>**c**</u>ombines several values into a vector.
<br><br>
As a shorthand, you can create sequences of numbers using the `:`, like: `1:10`. Try this out in the console.
:::

Any mathematical calculations will work on the _whole vector_ all at once. For example, we could do the circumference calculation again, this time for circles of a few different diameters.

```{r}
r <- c(7, 36, 28, 1, 0)
2*x*r
```

:::{.aside}
Check the last two elements and see that it has correctly listed $2 \pi \cdot 1 = 2\pi$ and $2\pi \cdot 0 = 0$, for example.
<br><br>
This property of being able to perform calculations over whole vectors is what makes this computer software useful for statistics. Routine calculations on a whole dataset can be done quickly and precisely without a pen or calculator.
:::

### Qualitative Data Types

We can create vectors of **qualitative** variables too. R has one data type for both nominal and ordinal variables: the **factor**.

```{r}
handedness <- factor(c("Right-Handed", "Left-Handed", "Ambidextrous"))

handedness
```

R refers to the unique names a factor can take on as its _levels_.

### Random Data

It's often useful to be able to generate random data, whether to randomly assign participants to groups or to _simulate_ what our results might look like. There are several functions to do with randomness, but we'll start by demonstrating how to use the `sample()` function.

A simple example is the roll of a die. This code will randomly take from the six possible face values, sampling the equivalent of 25 die rolls. 

```{r}
sample(c(1,2,3,4,5,6), 25, replace=TRUE)
```

:::{.aside}
The `replace=TRUE` means "sample with replacement". In other words: take a random number from 1 to 6 and then put it back before taking a random number a second time, a third time, etc.
:::

Combining this with what we learned above about factor variables (nominal or ordinal data types), we can demonstrate one way to **randomly assign** ten participants to two groups.

```{r}
# Define a nominal variable (factor) with two levels: treatment and placebo.
conditions <- factor(c("treatment", "placebo"))

# Start with alternating (repeat), five in each group.
assignment <- c(rep(conditions, 5))

# Randomize the variable so that 5 participants are assigned randomly to each (10 in total).
assignment <- sample(assignment, 10)

assignment
```

:::{.aside}
As you run each line, take a look at the `conditions` and `assignment` variables in your R environment.
:::


## Oodles of Observations

Most data we deal with is **tabular**; we've collected many observations of more than just one variable. To keep track of it all, we stack columns side-by-side together into tables. In R, we equivalently put vectors together into **dataframes**.

We saw an example of a dataframe last week, the data table from the `ChickWeight` experiment.

```{r}
# Remember head() lets us see just the first few rows - not the whole dataframe.
ChickWeight |> head()
```

With what we've learned in the last week, which of the four variables was the independent variable and which was the dependent variable in this experiment?

<details>
<summary>
Think for a moment and then click here to reveal an explanation.
</summary>
Recall that there were several diets a chick could be assigned to, and its weight was measured over time as it grew up.

- The experiment manipulated `Diet` as an independent variable.
- The dependent variable was `weight` in grams, observed every two days.
</details>

If we want to create our own data frame, we can build one using `data.frame()`.

```{r}
data.frame(trial=c(1,2,3), dice_roll=c(12,3,7))
```

Putting it all together, let's create a table containing 10000 datapoints of random age and biological sex and call it `demographics`.

```{r}
N <- 10000

demographics <- data.frame(
  age = sample(18:90, N, replace=TRUE),
  biosex = sample(factor(c("male", "female")), N, replace=TRUE)
)

head(demographics)
```

Because this is uniformly random, we should expect even-looking plots.

```{r}
library(ggplot2)

ggplot(demographics) +
  geom_boxplot(aes(x=biosex, y=age))
```

:::{.callout-tip title="Deliverables"}
If you can get this plot, that's the final product for today! Turn in a screenshot of your full RStudio screen, including code and box-and-whisker plot on Blackboard with Classwork/Homework Assignment 2.
:::

In future classes, we'll discuss more sophisticated ways to look at, obtain, and simulate datasets.

<!-- _Taking a look_ or **visualizing** a dataset is often one of the very first steps we take in order to acquaint ourselves with data, develop expectations, and check basic assumptions. -->

<!-- For example, perhaps we've **assumed** that two groups are about the same _age_ and _height_. We could probably gather this from looking at the raw dataframe. -->

<!-- ## _Simulating_ Real Data -->

<!-- There are many ways to simulate data. For the purposes of this class, we'll use a handy package called `truffle`. -->

<!-- ```{r} -->
<!-- #| message: false -->
<!-- # You do NOT need to code this part on your own! -->
<!-- library(truffle) -->

<!-- example <-  -->
<!--   truffle_likert( -->
<!--     study_design = "factorial_between2", -->
<!--     n_per_condition = 5, -->
<!--     factors  = "X1_latent", -->
<!--     prefixes = "X1_item", -->
<!--     alpha = .70, -->
<!--     n_items = 5, -->
<!--     n_levels = 7, -->
<!--     approx_d_between_groups = 0.50, -->
<!--     seed = 42 -->
<!--   ) |> -->
<!--   truffle_demographics() -->

<!-- example -->
<!-- ``` -->
